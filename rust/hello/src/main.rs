// Source: https://doc.rust-lang.org/book/ch20-03-graceful-shutdown-and-cleanup.html
// Some code explanations were generated by ChatGPT.

use std::{
    fs,
    io::prelude::*,
    net::{TcpListener, TcpStream},
    thread,
    time::Duration,
};

use hello::ThreadPool;

fn main() {
    let listener = TcpListener::bind("127.0.0.1:7878").unwrap();
    let pool = ThreadPool::new(4);

    for stream in listener.incoming().take(2) {
        let stream = stream.unwrap();

        pool.execute(|| {
            handle_connection(stream);
        });
    }

    println!("Shutting down.");
}

#[allow(clippy::unused_io_amount)]
fn handle_connection(mut stream: TcpStream) {
    // Creates an array of 1024 elements, all initialized to the value 0.
    let mut buffer = [0; 1024];

    stream.read(&mut buffer).unwrap();
    // let bytes_read = stream.read(&mut buffer).unwrap();
    // let buffer = &buffer[..bytes_read];

    let get = b"GET / HTTP/1.1\r\n";
    let sleep = b"GET /sleep HTTP/1.1\r\n";

    let (status_line, filename) = if buffer.starts_with(get) {
        ("HTTP/1.1 200 OK", "hello.html")
    } else if buffer.starts_with(sleep) {
        // The `/sleep` endpoint causes the server to pause
        // for 5 seconds before responding, simulating a slow request.
        thread::sleep(Duration::from_secs(5));
        ("HTTP/1.1 200 OK", "hello.html")
    } else {
        ("HTTP/1.1 404 NOT FOUND", "404.html")
    };

    let contents = fs::read_to_string(filename).unwrap();

    // Formats an HTTP response with the status line,
    // the length of the contents, and the contents themselves.
    let response = format!(
        "{}\r\nContent-Length: {}\r\n\r\n{}",
        status_line,
        contents.len(),
        contents
    );

    // Writes the response to the TCP stream.
    stream.write_all(response.as_bytes()).unwrap();

    // Flushes the stream, ensuring that all intermediately
    // buffered contents reach their destination.
    stream.flush().unwrap();
}
